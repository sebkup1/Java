import java.io.*;
import java.net.*;
import java.util.Random;
import java.awt.*;
import java.awt.event.*;

import javax.swing.*;

//@SuppressWarnings("serial")
public class Server extends JFrame {

	private JTextField userText;
	private JTextArea chatWindow;
	private ObjectOutputStream output;
	private ObjectInputStream input;
	private ServerSocket server;
	private Socket connection;
	private DBConnector con;
	private boolean LPCProtocolSet;

	// constructor
	public Server() {
		super("LPC MySql Connector");
		userText = new JTextField();
		userText.setEditable(false);

		userText.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent event) {
				sendMessage(event.getActionCommand());
				userText.setText("");
			}
		});
		getContentPane().add(userText, BorderLayout.NORTH);
		chatWindow = new JTextArea();
		JScrollPane scrollPane = new JScrollPane(chatWindow);
		getContentPane().add(scrollPane);
		setSize(300, 150);
		setVisible(true);

		// MySql Connection
		con = new DBConnector();
	}

	// set up and run the server
	public void startRunning() {
		try {
			server = new ServerSocket(50000, 100);
			// backlog - ile osób mo¿e siê pod³¹czyæ
			while (true) {
				try {
					waitForConnection();
					setupStreams();
					whileChatting();
				} catch (EOFException eofException) {
					showMessage("\n Server ended the connection! ");
					System.out.println("Rzucony wyjatek");
				} finally {
					showMessage("\n Preparing to new connection... \n");
				}
			}

		} catch (IOException ioException) {
			ioException.printStackTrace();
		}
	}

	// wait for connection, then display connection information
	private void waitForConnection() throws IOException {
		showMessage("Waiting for LPC to connect...\n");
		connection = server.accept();
		showMessage(" Now connected to " + connection.getInetAddress().getHostName());

	}

	// get stream to send and recieve data
	private void setupStreams() throws IOException {
		output = new ObjectOutputStream(connection.getOutputStream());
		output.flush();
		input = new ObjectInputStream(connection.getInputStream());

		String message = "init_data";
		sendMessage(message);

		showMessage("\n Streams are now setup");

	}

	// during the chat converstaion
	private void whileChatting() throws IOException {
		String message;// = " You are now connected!";
		// sendMessage(message);
		ableToType(true);
		Random generator = new Random();
		int results = 1;
		do {
			// have a conversation
			try {
				message = (String) input.readObject();
				showMessage("\n LPC - " + message);
				if (message.contains("REQ"))
					continue;
				else if (message.substring(0, 1).contains("D"))
					con.sendLog();
				else if ((message.substring(0, 7).contains(")") || message.substring(0, 7).contains("+"))
						|| (message.charAt(7) != ')' && message.charAt(7) != '+')) {
					this.sendMessage("zzzzzzzz" + generator.nextInt(1000));
				} else {
					results = con.allowOpen(message.substring(0, 7), message.charAt(7));

					if (results == 0) // Można wjeżdżać
					{
						this.sendMessage("bbbbbbbb" + generator.nextInt(1000));
					} else {
						if (results == 2) // Zły kod
							this.sendMessage("rrrrrrrr" + generator.nextInt(1000));
						else if (results == 3) // Kod w użyciu
							this.sendMessage("ggggggg" + generator.nextInt(1000));
						else if (results == 4) // Koniec abonamentu
							this.sendMessage("ccccccc" + generator.nextInt(1000));
						else if (results == 5) // Inny samochód
							this.sendMessage("aaaaaaa" + generator.nextInt(1000));
						else if (results == 6) // Zakaz wyjazdu
							this.sendMessage("ttttttt" + generator.nextInt(1000));
						else if (results == 7) // Ta osoba lub auto już wjechały
							this.sendMessage("ooooooo" + generator.nextInt(1000));
						else // Błąd wewnętrzny
							this.sendMessage("ppppppp" + generator.nextInt(1000));
					}
				}
			} catch (ClassNotFoundException classNotFoundException) {
				showMessage("\n idk what user send!");
				closeConnection();

			} catch (IOException ex) {
				showMessage("\n IOException thrown!");
				closeConnection();
				return;
			}
		} while (!message.equals("END")); // gdy klient co takiego napisze to
											// roz³¹czam po³¹czenie
	}

	// close streams and sockets after done chatting
	private void closeConnection() {
		showMessage("\n Closing connections...");

		ableToType(false);
		try {
			output.close();
			input.close();
			connection.close();
		} catch (IOException ioException) {
			ioException.printStackTrace();
		}
	}

	// sending message to client
	private void sendMessage(String message) {
		try {
			output.writeObject(message);
			output.flush();
			showMessage("\n SERVER - " + message);
		} catch (IOException ioException) {
			chatWindow.append("\n ERROR: Can't send message");
			//closeConnection();
		}
	}

	// displays the message
	private void showMessage(final String text) {
		SwingUtilities.invokeLater(new Runnable() { // nowy watek
			public void run() {
				chatWindow.append(text);

			}
		});
	}

	// let the user type staff into their box
	private void ableToType(final boolean tof) {
		SwingUtilities.invokeLater(new Runnable() { // nowy watek
			public void run() {
				userText.setEditable(tof);
			}
		});

	}
}